" This is my config :)
" Make sure vim-plug is installed!

" vim-plug ----------- {{{
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes


" Easy Life for Developers
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdcommenter'
Plug 'jreybert/vimagit'
Plug 'snakemake/snakemake', {'rtp': 'misc/vim'}
"Plug 'snakemake/snakefmt'
Plug 'easymotion/vim-easymotion'

" Looks
Plug 'embark-theme/vim', { 'as': 'embark' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" Initialize plugin system
call plug#end()

"}}}


" General ------------- {{{
set number relativenumber              " Show line numbers

set nocompatible        " Be improved!
set encoding=utf-8
set noswapfile

filetype plugin on

" colorscheme embark

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set linebreak           " Break lines at word (requires Wrap lines)
set showbreak=+++	" Wrap-broken line prefix
set textwidth=100	" Line wrap (number of cols)
set showmatch	        " Highlight matching brace
set visualbell	        " Use visual bell (no beeping)
 
set hlsearch	        " Highlight all search results
set smartcase	        " Enable smart-case search
set ignorecase	        " Always case-insensitive
set incsearch	        " Searches for strings incrementally
 
set autoindent	        " Auto-indent new lines
set expandtab	        " Use spaces instead of tabs
set shiftwidth=4	" Number of auto-indent spaces
set smartindent	        " Enable smart-indent
set smarttab	        " Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab

set termguicolors
 
"" Advanced
set ruler	        " Show row and column ruler information
 
set undolevels=1000	" Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set scrolloff=5

set timeoutlen=1000
set ttimeoutlen=50
 
syntax on
 
"" Generated by VimConfig.com
"}}}


" Keymappings ------- {{{

"" Map Keys
nnoremap <SPACE> <Nop>
let mapleader=" "

" Vimagit
nmap <leader>gs :Magit<CR>

" NERDTree
let NERDTreeQuitOnOpen=1
nmap <leader>0 :NERDTreeToggle<CR>

" Tabs
let g:ariline#extensions#tabline#enabled=1
let g:ariline#extensions#tabline#fnamemode=':t'
nmap <leader>1 :tabp<CR>
nmap <leader>2 :tabn<CR>

" Buffer
nmap <leader>bn :bn<CR>
nmap <leader>bp :bp<CR>

" Airline
let g:airline_theme='embark'

" Show trailing whitespace, tabs, etc
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:•
"set listchars=tab:→,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:•
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
nmap <leader>ts :set list!<CR>

" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" My random stuff
nmap <leader>qq :q<CR>
nmap <leader>qw :wq<CR>
nmap <leader>fs :w<CR>
nmap <leader>wv <c-w>v
nmap <leader>wh <c-w>h
nmap <leader>wj <c-w>j
nmap <leader>wk <c-w>k
nmap <leader>wl <c-w>l
nmap <leader>sc :noh<CR>
" unmap <Tab>
nmap <Tab> za

"}}}


" Visual changes ------ {{{

" Make folds beautiful
hi Folded ctermbg=24 ctermfg=225
hi Folded guibg=#005f87 guifg=#ffdfff

" }}}


" Show Tab Numbers! ------ {{{
" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= '%#TabNum#'
            let s .= i
            " let s .= '%*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= ' ' . file . ' '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNum Special
endif
" }}}


" Folding for .vimrc
augroup config_setting
        autocmd!
        autocmd FileType vim setlocal foldlevel=0 foldmethod=marker
augroup END
